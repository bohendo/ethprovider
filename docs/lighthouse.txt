Lighthouse v1.0.6-f183af2
Sigma Prime <contact@sigmaprime.io>
Ethereum 2.0 client by Sigma Prime. Provides a full-featured beacon node, a validator client and utilities for managing
validator accounts.

USAGE:
    lighthouse [FLAGS] [OPTIONS] [SUBCOMMAND]

FLAGS:
    -l               Enables environment logging giving access to sub-protocol logs such as discv5 and libp2p
    -h, --help       Prints help information
    -V, --version    Prints version information

OPTIONS:
    -d, --datadir <DIR>          Used to specify a custom root data directory for lighthouse keys and databases.
                                 Defaults to $HOME/.lighthouse/{network} where network is the value of the `network`
                                 flag Note: Users should specify separate custom datadirs for different networks.
        --debug-level <LEVEL>    The verbosity level for emitting logs. [default: info]  [possible values: info, debug,
                                 trace, warn, error, crit]
        --log-format <FORMAT>    Specifies the format used for logging. [possible values: JSON]
        --logfile <FILE>         File path where output will be written.
        --network <network>      Name of the Eth2 chain Lighthouse will sync and follow. [possible values: medalla,
                                 altona, spadina, pyrmont, mainnet, toledo]
    -s, --spec <DEPRECATED>      This flag is deprecated, it will be disallowed in a future release. This value is now
                                 derived from the --network or --testnet-dir flags.
    -t, --testnet-dir <DIR>      Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse
                                 testnet. Only effective if there is no existing database.

SUBCOMMANDS:
    account_manager     Utilities for generating and managing Ethereum 2.0 accounts. [aliases: a, am, account,
                        account_manager]
    beacon_node         The primary component which connects to the Ethereum 2.0 P2P network and downloads, verifies
                        and stores blocks. Provides a HTTP API for querying the beacon chain and publishing messages
                        to the network. [aliases: b, bn, beacon]
    boot_node           Start a special Lighthouse process that only serves as a discv5 boot-node. This process will
                        *not* import blocks or perform most typical beacon node functions. Instead, it will simply
                        run the discv5 service and assist nodes on the network to discover each other. This is the
                        recommended way to provide a network boot-node since it has a reduced attack surface
                        compared to a full beacon node.
    help                Prints this message or the help of the given subcommand(s)
    remote_signer       Simple HTTP BLS signer service. This service is designed to be consumed by Ethereum 2.0
                        clients, looking for a more secure avenue to store their BLS12-381 secret keys, while
                        running their validators in more permisive and/or scalable environments. [aliases: rs]
    validator_client    When connected to a beacon node, performs the duties of a staked validator (e.g., proposing
                        blocks and attestations). [aliases: v, vc, validator]

